/* 
 * CS:APP Data Lab 
 * 
 * <Please put your name and userid here>
 * 
 * bits.c - Source file with your solutions to the Lab.
 *          This is the file you will hand in to your instructor.
 *
 * WARNING: Do not include the <stdio.h> header; it confuses the dlc
 * compiler. You can still use printf for debugging without including
 * <stdio.h>, although you might get a compiler warning. In general,
 * it's not good practice to ignore compiler warnings, but in this
 * case it's OK.  
 */

#if 0
/*
 * Instructions to Students:
 *
 * STEP 1: Read the following instructions carefully.
 */

You will provide your solution to the Data Lab by
editing the collection of functions in this source file.

INTEGER CODING RULES:
 
  Replace the "return" statement in each function with one
  or more lines of C code that implements the function. Your code 
  must conform to the following style:
 
  int Funct(arg1, arg2, ...) {
      /* brief description of how your implementation works */
      int var1 = Expr1;
      ...
      int varM = ExprM;

      varJ = ExprJ;
      ...
      varN = ExprN;
      return ExprR;
  }

  Each "Expr" is an expression using ONLY the following:
  1. Integer constants 0 through 255 (0xFF), inclusive. You are
      not allowed to use big constants such as 0xffffffff.
  2. Function arguments and local variables (no global variables).
  3. Unary integer operations ! ~
  4. Binary integer operations & ^ | + << >>
    
  Some of the problems restrict the set of allowed operators even further.
  Each "Expr" may consist of multiple operators. You are not restricted to
  one operator per line.

  You are expressly forbidden to:
  1. Use any control constructs such as if, do, while, for, switch, etc.
  2. Define or use any macros.
  3. Define any additional functions in this file.
  4. Call any functions.
  5. Use any other operations, such as &&, ||, -, or ?:
  6. Use any form of casting.
  7. Use any data type other than int.  This implies that you
     cannot use arrays, structs, or unions.

 
  You may assume that your machine:
  1. Uses 2s complement, 32-bit representations of integers.
  2. Performs right shifts arithmetically.
  3. Has unpredictable behavior when shifting an integer by more
     than the word size.

EXAMPLES OF ACCEPTABLE CODING STYLE:
  /*
   * pow2plus1 - returns 2^x + 1, where 0 <= x <= 31
   */
  int pow2plus1(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     return (1 << x) + 1;
  }

  /*
   * pow2plus4 - returns 2^x + 4, where 0 <= x <= 31
   */
  int pow2plus4(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     int result = (1 << x);
     result += 4;
     return result;
  }

FLOATING POINT CODING RULES

For the problems that require you to implent floating-point operations,
the coding rules are less strict.  You are allowed to use looping and
conditional control.  You are allowed to use both ints and unsigneds.
You can use arbitrary integer and unsigned constants.

You are expressly forbidden to:
  1. Define or use any macros.
  2. Define any additional functions in this file.
  3. Call any functions.
  4. Use any form of casting.
  5. Use any data type other than int or unsigned.  This means that you
     cannot use arrays, structs, or unions.
  6. Use any floating point data types, operations, or constants.


NOTES:
  1. Use the dlc (data lab checker) compiler (described in the handout) to 
     check the legality of your solutions.
  2. Each function has a maximum number of operators (! ~ & ^ | + << >>)
     that you are allowed to use for your implementation of the function. 
     The max operator count is checked by dlc. Note that '=' is not 
     counted; you may use as many of these as you want without penalty.
  3. Use the btest test harness to check your functions for correctness.
  4. Use the BDD checker to formally verify your functions
  5. The maximum number of ops for each function is given in the
     header comment for each function. If there are any inconsistencies 
     between the maximum ops in the writeup and in this file, consider
     this file the authoritative source.

/*
 * STEP 2: Modify the following functions according the coding rules.
 * 
 *   IMPORTANT. TO AVOID GRADING SURPRISES:
 *   1. Use the dlc compiler to check that your solutions conform
 *      to the coding rules.
 *   2. Use the BDD checker to formally verify that your solutions produce 
 *      the correct answers.
 */


#endif
/* 
 * bitAnd - x&y using only ~ and | 
 *   Example: bitAnd(6, 5) = 4
 *   Legal ops: ~ |
 *   Max ops: 8
 *   Rating: 1
 */
int bitAnd(int x, int y) {

	//This function uses De'Morgan's law create an (and) from (nots) and (ors).	

	return ~(~x|~y);
}
/* 
 * getByte - Extract byte n from word x
 *   Bytes numbered from 0 (LSB) to 3 (MSB)
 *   Examples: getByte(0x12345678,1) = 0x56
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 6
 *   Rating: 2
 */
int getByte(int x, int n) {

	//This function first shifts the desired byte to the first 8 bits. Then it (ands) x with 0x000000FF to delete all data except the desired byte.

 	n = n << 3;
 	x = x >> n;
 	return x & 0xFF;
}
/* 
 * logicalShift - shift x to the right by n, using a logical shift
 *   Can assume that 0 <= n <= 31
 *   Examples: logicalShift(0x87654321,4) = 0x08765432
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 3 
 */
int logicalShift(int x, int n) {

	//This function first creates a mask. The mask will be all zeros if x is positive. If x is negative the mask will be n ones followed by 32-n zeros. The function then applies xor to the mask and x. If x is positve the right shift will be correct and the mask will not effect x. If x is negative the right shift will pull in ones and the mask will turn the ones that were shifted in to zeros.

	int temp = x;
	x = x >> 31;
	x = x << 31;
	x = x >> n;
	x = x << 1;
	temp = temp >> n;
	return x^temp;
}
/*
 * bitCount - returns count of number of 1's in word
 *   Examples: bitCount(5) = 2, bitCount(7) = 3
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 40
 *   Rating: 4
 */
int bitCount(int x) {

	//This function first maskes three masks, 0x55555555, 0x33333333, 0x0f0f0f0f. It does this by taking the first byte and copying it into the higher three bytes. This function then used the SWAR alogorithm for poulation count to count the number of ones in the word.
	
	int mask1 = 0x00000055;
	int mask2 = 0x00000033;
	int mask3 = 0x0000000f;
	int temp = mask1 << 8;
	
	mask1 = temp | mask1;
	temp = mask1 << 16;
	mask1 = temp | mask1;

	temp = mask2 << 8;
	mask2 = temp | mask2;
	temp = mask2 << 16;
	mask2 = temp | mask2;
	
	temp = mask3 << 8;
	mask3 = temp | mask3;
	temp = mask3 << 16;
	mask3 = temp | mask3;

	x = x + (~(((x >> 1) & mask1))+1);
	x = (((x >> 2) & mask2) + (x & mask2));
	x = (((x >> 4) + x) & mask3);
	x = x + (x >> 8);
	x = x + (x >> 16);
	return x & 0x0000003f;
}
/* 
 * bang - Compute !x without using !
 *   Examples: bang(3) = 0, bang(0) = 1
 *   Legal ops: ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 4 
 */
int bang(int x) {

	//This function takes advantage of the fact that if you take the sign bit of a number, and the sign bit of it's negative, you will always get zero for the sign bit of the positive and one for the sign bit of the negative, except for when the number is zero, in which case you will get zero for both. by taking these two numbers  

	int result = 0;
	int a = (x >> 31)&0x1;
	int b = ~x + 1;
	b = (b >> 31)&0x1;
	result = a|b;
	return (~result)&0x1;
}
/* 
 * tmin - return minimum two's complement integer 
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 4
 *   Rating: 1
 */
int tmin(void) {

	//The smallest possible two's complement integer is 0x80000000. However, since this constant is too large, this function starts with 0x00000001 and then shifts it to the right 31 bits.

	int x = 0x1;
  	return x << 31;
}
/* 
 * fitsBits - return 1 if x can be represented as an 
 *  n-bit, two's complement integer.
 *   1 <= n <= 32
 *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 2
 */
int fitsBits(int x, int n) {

	//This function shifts x to the right by n-1 bits. If n is the correct number of bits, then the result of the shift will either be all zeros or all ones. The function then checks to see if the result was either all zeros or all ones and returns, and then returns true if it was or false if it wasn't. 

	int mask = 0xff;
	int temp = mask << 8;
	int a = 0;
	int b = 0;
	mask = temp | mask;
	temp = mask << 16;
	mask = temp | mask;
	a = x >> (n + (~1 + 1));
	b = a;
	a = !a;
	b = b^mask;
	b = !b;
	return a|b;
}
/* 
 * divpwr2 - Compute x/(2^n), for 0 <= n <= 30
 *  Round toward zero
 *   Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 2
 */
int divpwr2(int x, int n) {

	//This function checks the sign bit of x, and adds it to the total x on the negative values that are rounding up.
	int n1 = ~0 + (1 << n);
	int n2 = x >> 31;
	int n3 = x + (n1&n2);
	int x1 = n3 >> n;
	return x1;
}
/* 
 * negate - return -x 
 *   Example: negate(1) = -1.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 5
 *   Rating: 2
 */
int negate(int x) {

	//This function applies two's complement to convert x to negative x.

  return ~x+1;
}
/* 
 * isPositive - return 1 if x > 0, return 0 otherwise 
 *   Example: isPositive(-1) = 0.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 8
 *   Rating: 3
 */
int isPositive(int x) {
	
	//This function first checks to see if x is not a negative number. Then it checks to see if x is not zero. If x is both not negative and not zero then x must be postive.
	
	int a = !((x >> 31)&0x1);
	int b = !(!x);
	return a&b;
}
/* 
 * isLessOrEqual - if x <= y  then return 1, else return 0 
 *   Example: isLessOrEqual(4,5) = 1.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 24
 *   Rating: 3
 */
int isLessOrEqual(int x, int y) {

	//This function first checks to see if x and y have different signs. Then it checks to see if x is negative. If the signs are different and x is negative then it returns true. Then the functions subtracts x from y and checks to see if the result was positive. If the subtraction was postive and the signs of x and y are not different then it returns true.
	
	int s1 = !(x >> 31);
	int s2 = !(y >> 31);
	int sd = s1^s2;
	int a = sd & !s1;
	int z = y + (~x + 1);
	int b = (!sd) & !(z >> 31);
	return a|b;
}
/*
 * ilog2 - return floor(log base 2 of x), where x > 0
 *   Example: ilog2(16) = 4
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 90
 *   Rating: 4
 */
int ilog2(int x) {

	//This function first copies the highest bit into all of the bits lower than itself. Then the same code as bitCount is used to count the number of ones. This works because each new bit moves the value up by 2^n. So returning the number of the highest bit used is the same as returning floor(log2(x)). Also one is subtracted from the end because the first bit is the zeroth or 2^0, and that bit needs to be subtracted from the calculation.

	int mask1 = 0x00000055;
	int mask2 = 0x00000033;
	int mask3 = 0x0000000f;
	int temp = mask1 << 8;
	
	x = x | x >> 1;
	x = x | x >> 2;
	x = x | x >> 4;
	x = x | x >> 8;
	x = x | x >> 16;

	mask1 = temp | mask1;
	temp = mask1 << 16;
	mask1 = temp | mask1;

	temp = mask2 << 8;
	mask2 = temp | mask2;
	temp = mask2 << 16;
	mask2 = temp | mask2;
	
	temp = mask3 << 8;
	mask3 = temp | mask3;
	temp = mask3 << 16;
	mask3 = temp | mask3;

	x = x + (~(((x >> 1) & mask1))+1);
	x = (((x >> 2) & mask2) + (x & mask2));
	x = (((x >> 4) + x) & mask3);
	x = x + (x >> 8);
	x = x + (x >> 16);
	x = x + (~1 + 1);	

	return x & 0x0000003f;
}
